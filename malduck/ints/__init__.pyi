from typing import Any, Literal, Tuple, overload

class FixedInt:
    def __init__(self, value: int, bits: int, sign: bool): ...
    @property
    def value(self) -> int: ...
    @property
    def typename(self) -> str: ...
    @property
    def struct_format(self) -> str: ...
    def __add__(self, other: Any) -> "FixedInt": ...
    def __radd__(self, other: Any) -> int: ...
    def __sub__(self, other: Any) -> "FixedInt": ...
    def __rsub__(self, other: Any) -> int: ...
    def __mul__(self, other: Any) -> "FixedInt": ...
    def __rmul__(self, other: Any) -> int: ...
    def __floordiv__(self, other: Any) -> "FixedInt": ...
    def __rfloordiv__(self, other: Any) -> int: ...
    def __truediv__(self, other: Any) -> float: ...
    def __rtruediv__(self, other: Any) -> float: ...
    def __mod__(self, other: Any) -> "FixedInt": ...
    def __rmod__(self, other: Any) -> int: ...
    def __pow__(self, other) -> "FixedInt": ...
    def __rpow__(self, other) -> int: ...
    def __neg__(self) -> "FixedInt": ...
    def __pos__(self) -> int: ...
    def __abs__(self) -> "FixedInt": ...
    def __bool__(self) -> bool: ...
    def __invert__(self) -> "FixedInt": ...
    def __lshift__(self, other: Any) -> "FixedInt": ...
    def __rlshift__(self, other: Any) -> int: ...
    def __rshift__(self, other: Any) -> "FixedInt": ...
    def __rrshift__(self, other: Any) -> int: ...
    def __and__(self, other: Any) -> "FixedInt": ...
    def __rand__(self, other: Any) -> int: ...
    def __xor__(self, other: Any) -> "FixedInt": ...
    def __rxor__(self, other: Any) -> int: ...
    def __or__(self, other: Any) -> "FixedInt": ...
    def __ror__(self, other: Any) -> int: ...
    def __float__(self) -> float: ...
    def __lt__(self, other: Any) -> bool: ...
    def __le__(self, other: Any) -> bool: ...
    def __eq__(self, other: Any) -> bool: ...
    def __int__(self) -> int: ...
    def __index__(self) -> int: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def __hash__(self) -> int: ...
    @property
    def numerator(self) -> int: ...
    @property
    def denominator(self) -> int: ...
    def pack(self) -> bytes: ...
    def pack_be(self) -> bytes: ...
    def rol(self, other: Any) -> "FixedInt": ...
    def ror(self, other: Any) -> "FixedInt": ...

class FixedIntTypeBase:
    multiplier: int

    def __init__(self, bits: int, sign: bool, multiplier: int = 1): ...
    @property
    def typename(self) -> str: ...
    @property
    def struct_format(self) -> str: ...
    @property
    def ctypes_type(self): ...
    def __call__(self, value: int) -> FixedInt: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...

class FixedIntType(FixedIntTypeBase):
    multiplier: int

    def __mul__(self, other: int) -> "FixedIntTypeMultiplied": ...
    @overload
    def unpack(self, other: bytes, *, fixed: Literal[False]) -> int: ...
    @overload
    def unpack(self, other: bytes, *, fixed: Literal[True]) -> FixedInt: ...
    @overload
    def unpack(self, other: bytes, offset: int = 0) -> FixedInt: ...
    @overload
    def unpack_be(self, other: bytes, *, fixed: Literal[False]) -> int: ...
    @overload
    def unpack_be(self, other: bytes, *, fixed: Literal[True]) -> FixedInt: ...
    @overload
    def unpack_be(self, other: bytes, offset: int = 0) -> FixedInt: ...

class FixedIntTypeMultiplied(FixedIntTypeBase):
    @overload
    def unpack(self, other: bytes, *, fixed: Literal[False]) -> Tuple[int, ...]: ...
    @overload
    def unpack(self, other: bytes, *, fixed: Literal[True]) -> Tuple[FixedInt, ...]: ...
    @overload
    def unpack(self, other: bytes, offset: int = 0) -> Tuple[FixedInt, ...]: ...
    @overload
    def unpack_be(self, other: bytes, *, fixed: Literal[False]) -> Tuple[int, ...]: ...
    @overload
    def unpack_be(
        self, other: bytes, *, fixed: Literal[True]
    ) -> Tuple[FixedInt, ...]: ...
    @overload
    def unpack_be(self, other: bytes, offset: int = 0) -> Tuple[FixedInt, ...]: ...

QWORD: FixedIntType
DWORD: FixedIntType
WORD: FixedIntType
BYTE: FixedIntType
CHAR: FixedIntType
UInt64: FixedIntType
UInt32: FixedIntType
UInt16: FixedIntType
UInt8: FixedIntType
Int64: FixedIntType
Int32: FixedIntType
Int16: FixedIntType
Int8: FixedIntType
